--[[ Pro Script Encoder
local EncodedScript = xorEncode(Script_Here) --use this to encode script
local DecodeScript = xorDecode(EncodedScript) --use this to Decode the encoded script
]]
--


---Admin Detector in Server
loadstring(game:HttpGet('https://raw.githubusercontent.com/MainScripts352/MainScripts352/main/Admin'))()
---


---Encoder Decoder Function
loadstring(game:HttpGet('https://raw.githubusercontent.com/MainScripts352/MainScripts352/main/Encode%20Source'))()
---


---Binary Code Decoder Function
local function binaryToString(binaryStr) 
 local decodedStr = "" 
 if binaryStr:find(" ") then 
    for byte in binaryStr:gmatch("%S+") do 
      local asciiValue = tonumber(byte, 2)
      decodedStr = decodedStr..string.char(asciiValue) 
    end 
 else 
    for i = 1, #binaryStr, 8 do 
      local byte = binaryStr:sub(i, i+7) 
      local asciiValue = tonumber(byte, 2) 
      decodedStr = decodedStr..string.char(asciiValue) 
    end 
 end 
 return decodedStr
end
---


--[[ Hex Ecoder & Decoder
local hexEncoded = encodeToHex("Hello World") --use this to encode text to hex
local decodedText = decodeHex(hexEncoded) --use this to decode hex to text
]]

local function encodeToHex(str)
 local hex = ""
 for i = 1, #str do
   local char = string.byte(str, i)
   hex = hex .. string.format("%02x", char)
 end
 return hex
end
local function decodeHex(hex)
 local str = ""
 for i = 1, #hex, 2 do
   local byte = tonumber(hex:sub(i, i + 1), 16)
   str = str .. string.char(byte)
 end
 return str
end
--



local DecodeAuthorizationKey = "0192837465-83"
local function Pro_xorEncode(script)
 local key = DecodeAuthorizationKey
 local encoded = {}
 for i = 1, #script do
   local keyChar = key:byte((i - 1) % #key + 1) 
   local encodedChar = string.char(bit32.bxor(script:byte(i), keyChar))
   table.insert(encoded, encodedChar)
 end
 return table.concat(encoded)
end

function xorEncode(script)
 return encodeToHex(Encode(Encode(Pro_xorEncode(script), "ASCII"), "G-Code"))
end

function xorDecode(encoded_script, Authorization)
 if Authorization == DecodeAuthorizationKey then
    return Pro_xorEncode(Decode(Decode(decodeHex(encoded_script), "G-Code"), "ASCII"))
 end
end

function load(encoded_script)
 loadstring(xorDecode(encoded_script, DecodeAuthorizationKey))()
end

function xorbinaryload(encoded_script)
  loadstring(Pro_xorEncode(binaryToString(encoded_script)))()
end
