--[[ Base64 Encoder & Decoder
local Decoded = EncodeBase64("Hello World") --use this to encode base64 message
local Encoded = DecodeBase64("SGVsbG8gV29ybGQ=") --use this to decode base64 message
]]

---Base64 Decoder Function
function DecodeBase64(data)
	local b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	local result = {}
	data = string.gsub(data, '[^'..b..'=]', '') -- remove invalid characters
	local indexTable = {}
	for i = 1, #b do
		indexTable[string.sub(b, i, i)] = i - 1
	end
	local buffer = 0
	local bits = 0
	for i = 1, #data do
    local c = string.sub(data, i, i)
		if c ~= '=' then
			buffer = buffer * 64 + indexTable[c]
			bits = bits + 6
			if bits >= 8 then
				bits = bits - 8
				local byte = math.floor(buffer / (2 ^ bits))
				buffer = buffer % (2 ^ bits)
				table.insert(result, string.char(byte))
			end
		end
	end
	return table.concat(result)
end
---

--Base64 Encoder Function
function EncodeBase64(data)
	local b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	local result = {}
	local bytes = { string.byte(data, 1, #data) }
	for i = 1, #bytes, 3 do
		local byte1 = bytes[i]
		local byte2 = bytes[i + 1] or 0
		local byte3 = bytes[i + 2] or 0
		local combined = bit32.lshift(byte1, 16) + bit32.lshift(byte2, 8) + byte3
		local index1 = bit32.band(bit32.rshift(combined, 18), 63)
		local index2 = bit32.band(bit32.rshift(combined, 12), 63)
		local index3 = bit32.band(bit32.rshift(combined, 6), 63)
		local index4 = bit32.band(combined, 63)
		table.insert(result, b:sub(index1 + 1, index1 + 1))
		table.insert(result, b:sub(index2 + 1, index2 + 1))
		if i + 1 <= #bytes then
			table.insert(result, b:sub(index3 + 1, index3 + 1))
		else
			table.insert(result, '=')
		end
		if i + 2 <= #bytes then
			table.insert(result, b:sub(index4 + 1, index4 + 1))
		else
			table.insert(result, '=')
		end
	end
	return table.concat(result)
end
